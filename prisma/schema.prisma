// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(45)
  name          String?  @db.VarChar(100)
  username      String   @unique
  role          UserRole   @default(USER)
  isVerified    Boolean  @default(false)
  password      String   @db.VarChar(100)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cart          Cart?
  orders        Order[]
  Address       Address[]
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  fullName    String
  phoneNumber String   @db.VarChar(15)
  street      String
  wardCode    String
  districtId  Int
  cityId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]  @relation("AddressToOrder")
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  parentId   Int?
  parent     Category?   @relation("CategorySelf", fields: [parentId], references: [id], onDelete: Cascade)
  children   Category[]  @relation("CategorySelf")
  products   ProductCategory[] 
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}


model Product {
  id             Int                @id @default(autoincrement())
  name           String
  description    String
  displayImage   String[]
  categories     ProductCategory[]
  productDetails ProductDetail[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  vendor         String
  tags           String[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([productId, categoryId])
}

model ProductDetail {
  id          Int      @id @default(autoincrement())
  productId   Int
  size        String?
  color       String?
  stock       Int
  sale        Int      @default(0)
  price       Float
  discountPercentage Float @default(0)
  cartItems   CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageId             Int?
  image               ProductImage?   @relation(fields: [imageId], references: [id], onDelete: SetNull)
  orderItems          OrderItem[]     @relation("ProductDetailToOrderItem")
}

model ProductImage {
  id          Int        @id @default(autoincrement())
  url         String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  productDetails ProductDetail[]
}


model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cartItems  CartItem[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id               Int            @id @default(autoincrement())
  cartId           Int
  productDetailId  Int
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productDetail    ProductDetail  @relation(fields: [productDetailId], references: [id], onDelete: Cascade)
}

model Order {
  id             Int            @id @default(autoincrement())
  userId         Int
  shippingAddressId Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  shippingAddress Address       @relation("AddressToOrder", fields: [shippingAddressId], references: [id])
  orderItems     OrderItem[]
  status         OrderStatus    @default(PENDING)
  paymentMethod  String?        // COD, VNPay...
  shippingFee    Int?           // phí ship
  totalAmount    Int            // tổng tiền (tính sẵn)
  trackingCode   String?        // mã vận đơn từ GHTK/Viettel Post
  paidAt         DateTime?
  deliveredAt    DateTime?

  User User[]
}


model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productDetailId Int
  quantity        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productDetail   ProductDetail @relation("ProductDetailToOrderItem", fields: [productDetailId], references: [id], onDelete: Cascade)
  order           Order    @relation(fields: [orderId], references: [id])
}
