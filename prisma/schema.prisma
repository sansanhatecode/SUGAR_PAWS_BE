// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  COMPLETED
  REQUESTCANCEL
  CANCELLED
  REFUNDED
}

enum UserRole {
  ADMIN
  USER
}

enum VoucherType {
  SHIPPING
  DISCOUNT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique @db.VarChar(45)
  name              String?           @db.VarChar(100)
  username          String            @unique
  role              UserRole          @default(USER)
  isVerified        Boolean           @default(false)
  password          String            @db.VarChar(100)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  cart              Cart?
  orders            Order[]
  shippingAddresses ShippingAddress[]
  phoneNumber       String?           @db.VarChar(15)
  gender            String?           @db.VarChar(10)
  dayOfBirth        Int?
  monthOfBirth      Int?
  yearOfBirth       Int?
  chatHistory       ChatHistory[]
  userVouchers      UserVoucher[] // Quan hệ với UserVoucher
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  parentId  Int?
  parent    Category?         @relation("CategorySelf", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[]        @relation("CategorySelf")
  products  ProductCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Product {
  id             Int               @id @default(autoincrement())
  name           String
  description    String
  displayImage   String[]
  categories     ProductCategory[]
  productDetails ProductDetail[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  vendor         String
  tags           String[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([productId, categoryId])
}

model ProductDetail {
  id                 Int           @id @default(autoincrement())
  productId          Int
  size               String?
  color              String?
  type               String?
  stock              Int
  sale               Int           @default(0)
  price              Float
  discountPercentage Float         @default(0)
  cartItems          CartItem[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageId            Int?
  image              ProductImage? @relation(fields: [imageId], references: [id], onDelete: SetNull)
  orderItems         OrderItem[]   @relation("ProductDetailToOrderItem")
}

model ProductImage {
  id             Int             @id @default(autoincrement())
  url            String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  productDetails ProductDetail[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id              Int           @id @default(autoincrement())
  cartId          Int
  productDetailId Int
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cart            Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productDetail   ProductDetail @relation(fields: [productDetailId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int             @id @default(autoincrement())
  userId            Int
  shippingAddressId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  orderItems        OrderItem[]
  status            OrderStatus     @default(PENDING)
  shippingFee       Int?
  trackingCode      String?
  paidAt            DateTime?
  confirmedAt       DateTime?
  deliveredAt       DateTime?
  completedAt       DateTime?
  canceledAt        DateTime?
  requestCancelAt   DateTime?
  refundedAt        DateTime?

  user      User     @relation(fields: [userId], references: [id])
  payment   Payment?
  voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId Int?
}

model OrderItem {
  id              Int           @id @default(autoincrement())
  orderId         Int
  productDetailId Int
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  productDetail   ProductDetail @relation("ProductDetailToOrderItem", fields: [productDetailId], references: [id], onDelete: Cascade)
  order           Order         @relation(fields: [orderId], references: [id])
  review          Review?
}

model Payment {
  id           Int       @id @default(autoincrement())
  orderId      Int       @unique
  method       String
  status       String // UNPAID, PAID, FAILED, REFUNDED
  amount       Int
  responseData Json?
  paidAt       DateTime?

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id          Int      @id @default(autoincrement())
  userId      Int
  fullName    String
  phoneNumber String   @db.VarChar(15)
  homeNumber  String
  wardCode    Int
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  moreDetail  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ward Ward @relation(fields: [wardCode], references: [wardCode], onDelete: Cascade)

  orders Order[]
}

model Ward {
  wardCode     Int    @id
  name         String
  districtCode Int

  district District @relation(fields: [districtCode], references: [districtCode], onDelete: Cascade)

  shippingAddress ShippingAddress[]
}

model District {
  districtCode Int    @id
  name         String
  cityCode     Int

  city  City   @relation(fields: [cityCode], references: [cityCode], onDelete: Cascade)
  wards Ward[]
}

model City {
  cityCode Int    @id
  name     String

  districts District[]
}

model Review {
  id          Int      @id @default(autoincrement())
  orderItemId Int
  rating      Int
  comment     String?  @db.Text
  isVerified  Boolean  @default(false) // Verified purchase
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  eventTime   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Voucher {
  id                Int          @id @default(autoincrement())
  code              String       @unique @db.VarChar(50) // Mã voucher (VD: SHIP50, SALE20)
  name              String       @db.VarChar(100) // Tên voucher
  description       String?      @db.Text // Mô tả voucher
  type              VoucherType // Loại voucher (SHIPPING/DISCOUNT)
  discountType      DiscountType // Loại giảm giá (PERCENTAGE/FIXED_AMOUNT)
  discountValue     Float // Giá trị giảm (20 cho 20% hoặc 50000 cho 50k)
  maxDiscountAmount Float? // Giới hạn số tiền giảm tối đa (cho voucher %)
  minOrderAmount    Float? // Giá trị đơn hàng tối thiểu để áp dụng
  maxUsageCount     Int? // Số lần sử dụng tối đa (null = không giới hạn)
  currentUsageCount Int          @default(0) // Số lần đã sử dụng
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean      @default(true) // Trạng thái hoạt động
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  userVouchers UserVoucher[] // Danh sách user đã sử dụng
  orders       Order[] // Danh sách order đã sử dụng voucher này
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  usedAt    DateTime @default(now()) // Thời gian sử dụng
  orderId   Int? // Order ID sử dụng voucher này

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucher Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  // Đảm bảo mỗi user chỉ sử dụng 1 voucher 1 lần
  @@unique([userId, voucherId])
  @@index([userId])
  @@index([voucherId])
}
